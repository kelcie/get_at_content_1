Hmwk 4.6.1 

1) # 14 times bc 16-3=14 if you include the 3
 
 for i in range(3, 17):
     print 'hello'

2) 4  time bc it says how many so does 3 go into 11 with a remainder of zero

for j in range(12):
if j % 3 == 0:
print 'hello'

3) 5 so its saying how many times does 5 go into a range between 0-14 with a remainder of 3, and elif is saying once it has a remainder of 3 then do not repeat

for j in range(15):
if j % 5 == 3:
  print 'hello'
elif j % 4 == 3:
  print 'hello'
4) prints hello 5 times, while (! means do not equal to 15) then print hello, but when z= z+3 go through the first read and if you dont reach 15 then keep going.
z = 0
 while z != 15:
 print 'hello'
 z = z + 3
5) prints hello 8 times, while (means do not equal to 31) then print hello, but when z= z+1 go through the first read and if you dont reach 31 then keep going.
z = 12
 while z < 100:
if z == 31:
 for k in range(7):
print 'hello'
  elif z == 18:
print 'hello'
  z = z + 1 add 1 and do it again, 

DEFINE FOO
 
define foo1(x) and return the value of the squareroot
def foo1(x):
 return x ** 0.5

define foo2(x,y) and return the value for x if it's greater than y or else return the value of y 
def foo2(x, y):
  if x > y:
return x
  return y
define foo3(x,y,z) orders them from smaller to bigger
 def foo3(x, y, z):
if x > y:
  tmp = y
y = x
  x = tmp
if y > z:
  tmp = z
z = y
  y = tmp
if x > y:
  tmp = y
y = x
  x = tmp
return [x, y, z]
define foo4(x) gives you the factorial of the number you want
def foo4(x):
 result = 1
for i in range(1, x + 1):
 result = result * i
return result

define foo5(x) also gives you the factorial for x, its just a different way of writing it 
def foo5(x):
  if x == 1:
return 1
  return x * foo5(x - 1)
 





